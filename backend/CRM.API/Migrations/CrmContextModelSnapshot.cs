// <auto-generated />
using System;
using CRM.API.Models.EfCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CRM.API.Migrations
{
    [DbContext(typeof(CrmContext))]
    partial class CrmContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CRM.API.Models.EfCore.Attachment", b =>
                {
                    b.Property<int>("AttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AttachmentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttachmentId"));

                    b.Property<string>("FileName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FilePath")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("IssueId")
                        .HasColumnType("int")
                        .HasColumnName("IssueID");

                    b.Property<DateTime?>("UploadedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("UploadedBy")
                        .HasColumnType("int");

                    b.HasKey("AttachmentId")
                        .HasName("PK__Attachme__442C64DE8197A467");

                    b.HasIndex("IssueId");

                    b.HasIndex("UploadedBy");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("CRM.API.Models.EfCore.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CommentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("IssueId")
                        .HasColumnType("int")
                        .HasColumnName("IssueID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("CommentId")
                        .HasName("PK__Comments__C3B4DFAA29207F34");

                    b.HasIndex("IssueId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("CRM.API.Models.EfCore.CustomField", b =>
                {
                    b.Property<int>("FieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FieldID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FieldId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DefaultValue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FieldType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Options")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectID");

                    b.Property<bool>("Required")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("Searchable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("Usage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("FieldId")
                        .HasName("PK__CustomFi__C8B6FF2733DB0CE3");

                    b.HasIndex("ProjectId");

                    b.ToTable("CustomFields");
                });

            modelBuilder.Entity("CRM.API.Models.EfCore.Issue", b =>
                {
                    b.Property<int>("IssueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IssueID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IssueId"));

                    b.Property<int?>("AssigneeId")
                        .HasColumnType("int")
                        .HasColumnName("AssigneeID");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ParentIssueId")
                        .HasColumnType("int")
                        .HasColumnName("ParentIssueID");

                    b.Property<int?>("PriorityId")
                        .HasColumnType("int")
                        .HasColumnName("PriorityID");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectID");

                    b.Property<int>("ReporterId")
                        .HasColumnType("int")
                        .HasColumnName("ReporterID");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.Property<int?>("StoryPoints")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("TypeID");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("IssueId")
                        .HasName("PK__Issues__6C8616249FE0185F");

                    b.HasIndex("AssigneeId");

                    b.HasIndex("ParentIssueId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ReporterId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TypeId");

                    b.ToTable("Issues");
                });

            modelBuilder.Entity("CRM.API.Models.EfCore.IssueHistory", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LogID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"));

                    b.Property<string>("Action")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("IssueId")
                        .HasColumnType("int")
                        .HasColumnName("IssueID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("LogId")
                        .HasName("PK__IssueHis__5E5499A836C592F2");

                    b.HasIndex("IssueId");

                    b.HasIndex("UserId");

                    b.ToTable("IssueHistory", (string)null);
                });

            modelBuilder.Entity("CRM.API.Models.EfCore.IssueSprint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IssueId")
                        .HasColumnType("int")
                        .HasColumnName("IssueID");

                    b.Property<int>("SprintId")
                        .HasColumnType("int")
                        .HasColumnName("SprintID");

                    b.HasKey("Id")
                        .HasName("PK__IssueSpr__3214EC271E026DF1");

                    b.HasIndex("IssueId");

                    b.HasIndex("SprintId");

                    b.ToTable("IssueSprint", (string)null);
                });

            modelBuilder.Entity("CRM.API.Models.EfCore.IssueStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<string>("Category")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("todo");

                    b.Property<string>("Color")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.HasKey("StatusId")
                        .HasName("PK__IssueSta__C8EE2043091268EE");

                    b.ToTable("IssueStatus", (string)null);
                });

            modelBuilder.Entity("CRM.API.Models.EfCore.IssueType", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeId"));

                    b.Property<string>("Color")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Icon")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("TypeId")
                        .HasName("PK__IssueTyp__516F0395DE283E54");

                    b.ToTable("IssueTypes");
                });

            modelBuilder.Entity("CRM.API.Models.EfCore.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NotificationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("NotificationId")
                        .HasName("PK__Notifica__20CF2E32BBBB53CF");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("CRM.API.Models.EfCore.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProjectID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectId"));

                    b.Property<int>("CompletedIssues")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int")
                        .HasColumnName("OwnerID");

                    b.Property<string>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("medium");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("planning");

                    b.Property<int>("TeamMembers")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("TotalIssues")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("ProjectId")
                        .HasName("PK__Projects__761ABED0F84E1E1A");

                    b.HasIndex("OwnerId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("CRM.API.Models.EfCore.ProjectMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectID");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id")
                        .HasName("PK__ProjectM__3214EC275CAC56F1");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectMembers");
                });

            modelBuilder.Entity("CRM.API.Models.EfCore.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("RoleId")
                        .HasName("PK__Roles__8AFACE3AF0ACB446");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("CRM.API.Models.EfCore.Sprint", b =>
                {
                    b.Property<int>("SprintId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SprintID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SprintId"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Goal")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectID");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("planned");

                    b.HasKey("SprintId")
                        .HasName("PK__Sprints__29F16AE0D2AE87C3");

                    b.HasIndex("ProjectId");

                    b.ToTable("Sprints");
                });

            modelBuilder.Entity("CRM.API.Models.EfCore.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.HasKey("UserId")
                        .HasName("PK__Users__1788CCAC82B8EF95");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CRM.API.Models.EfCore.Workflow", b =>
                {
                    b.Property<int>("WorkflowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WorkflowID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkflowId"));

                    b.Property<int>("FromStatus")
                        .HasColumnType("int");

                    b.Property<int>("IssueTypeId")
                        .HasColumnType("int")
                        .HasColumnName("IssueTypeID");

                    b.Property<int>("ToStatus")
                        .HasColumnType("int");

                    b.HasKey("WorkflowId")
                        .HasName("PK__Workflow__5704A64A260F2150");

                    b.HasIndex("FromStatus");

                    b.HasIndex("IssueTypeId");

                    b.HasIndex("ToStatus");

                    b.ToTable("Workflows");
                });

            modelBuilder.Entity("CRM.API.Models.EfCore.Attachment", b =>
                {
                    b.HasOne("CRM.API.Models.EfCore.Issue", "Issue")
                        .WithMany("Attachments")
                        .HasForeignKey("IssueId")
                        .IsRequired()
                        .HasConstraintName("FK__Attachmen__Issue__3F466844");

                    b.HasOne("CRM.API.Models.EfCore.User", "UploadedByNavigation")
                        .WithMany("Attachments")
                        .HasForeignKey("UploadedBy")
                        .HasConstraintName("FK__Attachmen__Uploa__403A8C7D");

                    b.Navigation("Issue");

                    b.Navigation("UploadedByNavigation");
                });

            modelBuilder.Entity("CRM.API.Models.EfCore.Comment", b =>
                {
                    b.HasOne("CRM.API.Models.EfCore.Issue", "Issue")
                        .WithMany("Comments")
                        .HasForeignKey("IssueId")
                        .IsRequired()
                        .HasConstraintName("FK__Comments__IssueI__4222D4EF");

                    b.HasOne("CRM.API.Models.EfCore.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Comments__UserID__4316F928");

                    b.Navigation("Issue");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CRM.API.Models.EfCore.CustomField", b =>
                {
                    b.HasOne("CRM.API.Models.EfCore.Project", "Project")
                        .WithMany("CustomFields")
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("FK__CustomFie__Proje__440B1D61");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("CRM.API.Models.EfCore.Issue", b =>
                {
                    b.HasOne("CRM.API.Models.EfCore.User", "Assignee")
                        .WithMany("IssueAssignees")
                        .HasForeignKey("AssigneeId")
                        .HasConstraintName("FK__Issues__Assignee__48CFD27E");

                    b.HasOne("CRM.API.Models.EfCore.Issue", "ParentIssue")
                        .WithMany("InverseParentIssue")
                        .HasForeignKey("ParentIssueId")
                        .HasConstraintName("FK__Issues__ParentIs__49C3F6B7");

                    b.HasOne("CRM.API.Models.EfCore.Project", "Project")
                        .WithMany("Issues")
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("FK__Issues__ProjectI__4AB81AF0");

                    b.HasOne("CRM.API.Models.EfCore.User", "Reporter")
                        .WithMany("IssueReporters")
                        .HasForeignKey("ReporterId")
                        .IsRequired()
                        .HasConstraintName("FK__Issues__Reporter__4BAC3F29");

                    b.HasOne("CRM.API.Models.EfCore.IssueStatus", "Status")
                        .WithMany("Issues")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK__Issues__StatusID__4CA06362");

                    b.HasOne("CRM.API.Models.EfCore.IssueType", "Type")
                        .WithMany("Issues")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("FK__Issues__TypeID__4D94879B");

                    b.Navigation("Assignee");

                    b.Navigation("ParentIssue");

                    b.Navigation("Project");

                    b.Navigation("Reporter");

                    b.Navigation("Status");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("CRM.API.Models.EfCore.IssueHistory", b =>
                {
                    b.HasOne("CRM.API.Models.EfCore.Issue", "Issue")
                        .WithMany("IssueHistories")
                        .HasForeignKey("IssueId")
                        .IsRequired()
                        .HasConstraintName("FK__IssueHist__Issue__45F365D3");

                    b.HasOne("CRM.API.Models.EfCore.User", "User")
                        .WithMany("IssueHistories")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__IssueHist__UserI__46E78A0C");

                    b.Navigation("Issue");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CRM.API.Models.EfCore.IssueSprint", b =>
                {
                    b.HasOne("CRM.API.Models.EfCore.Issue", "Issue")
                        .WithMany("IssueSprints")
                        .HasForeignKey("IssueId")
                        .IsRequired()
                        .HasConstraintName("FK__IssueSpri__Issue__4E88ABD4");

                    b.HasOne("CRM.API.Models.EfCore.Sprint", "Sprint")
                        .WithMany("IssueSprints")
                        .HasForeignKey("SprintId")
                        .IsRequired()
                        .HasConstraintName("FK__IssueSpri__Sprin__4F7CD00D");

                    b.Navigation("Issue");

                    b.Navigation("Sprint");
                });

            modelBuilder.Entity("CRM.API.Models.EfCore.Notification", b =>
                {
                    b.HasOne("CRM.API.Models.EfCore.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Notificat__UserI__52593CB8");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CRM.API.Models.EfCore.Project", b =>
                {
                    b.HasOne("CRM.API.Models.EfCore.User", "Owner")
                        .WithMany("Projects")
                        .HasForeignKey("OwnerId")
                        .IsRequired()
                        .HasConstraintName("FK__Projects__OwnerI__5DCAEF64");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CRM.API.Models.EfCore.ProjectMember", b =>
                {
                    b.HasOne("CRM.API.Models.EfCore.Project", "Project")
                        .WithMany("ProjectMembers")
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("FK__ProjectMe__Proje__534D60F1");

                    b.HasOne("CRM.API.Models.EfCore.Role", "Role")
                        .WithMany("ProjectMembers")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK__ProjectMe__RoleI__5441852A");

                    b.HasOne("CRM.API.Models.EfCore.User", "User")
                        .WithMany("ProjectMembers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__ProjectMe__UserI__5535A963");

                    b.Navigation("Project");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CRM.API.Models.EfCore.Sprint", b =>
                {
                    b.HasOne("CRM.API.Models.EfCore.Project", "Project")
                        .WithMany("Sprints")
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("FK__Sprints__Project__5FB337D6");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("CRM.API.Models.EfCore.User", b =>
                {
                    b.HasOne("CRM.API.Models.EfCore.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK__Users__RoleID__628FA481");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CRM.API.Models.EfCore.Workflow", b =>
                {
                    b.HasOne("CRM.API.Models.EfCore.IssueStatus", "FromStatusNavigation")
                        .WithMany("WorkflowFromStatusNavigations")
                        .HasForeignKey("FromStatus")
                        .IsRequired()
                        .HasConstraintName("FK__Workflows__FromS__6383C8BA");

                    b.HasOne("CRM.API.Models.EfCore.IssueType", "IssueType")
                        .WithMany("Workflows")
                        .HasForeignKey("IssueTypeId")
                        .IsRequired()
                        .HasConstraintName("FK__Workflows__Issue__6477ECF3");

                    b.HasOne("CRM.API.Models.EfCore.IssueStatus", "ToStatusNavigation")
                        .WithMany("WorkflowToStatusNavigations")
                        .HasForeignKey("ToStatus")
                        .IsRequired()
                        .HasConstraintName("FK__Workflows__ToSta__656C112C");

                    b.Navigation("FromStatusNavigation");

                    b.Navigation("IssueType");

                    b.Navigation("ToStatusNavigation");
                });

            modelBuilder.Entity("CRM.API.Models.EfCore.Issue", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Comments");

                    b.Navigation("InverseParentIssue");

                    b.Navigation("IssueHistories");

                    b.Navigation("IssueSprints");
                });

            modelBuilder.Entity("CRM.API.Models.EfCore.IssueStatus", b =>
                {
                    b.Navigation("Issues");

                    b.Navigation("WorkflowFromStatusNavigations");

                    b.Navigation("WorkflowToStatusNavigations");
                });

            modelBuilder.Entity("CRM.API.Models.EfCore.IssueType", b =>
                {
                    b.Navigation("Issues");

                    b.Navigation("Workflows");
                });

            modelBuilder.Entity("CRM.API.Models.EfCore.Project", b =>
                {
                    b.Navigation("CustomFields");

                    b.Navigation("Issues");

                    b.Navigation("ProjectMembers");

                    b.Navigation("Sprints");
                });

            modelBuilder.Entity("CRM.API.Models.EfCore.Role", b =>
                {
                    b.Navigation("ProjectMembers");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("CRM.API.Models.EfCore.Sprint", b =>
                {
                    b.Navigation("IssueSprints");
                });

            modelBuilder.Entity("CRM.API.Models.EfCore.User", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Comments");

                    b.Navigation("IssueAssignees");

                    b.Navigation("IssueHistories");

                    b.Navigation("IssueReporters");

                    b.Navigation("Notifications");

                    b.Navigation("ProjectMembers");

                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
